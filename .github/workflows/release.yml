name: release

on:
  push:
    tags: [ 'v*.*.*' ]

env:
  CARGO_TERM_COLOR: always
  CRATES_IO_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
  NPM_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Install stable toolchain linux
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.69.0
      - name: Run tests
        run: cargo test --verbose

  release-linux:
    runs-on: ubuntu-latest
    needs: tests
    strategy:
      matrix:
        target: [ aarch64-unknown-linux-musl, x86_64-unknown-linux-musl ]
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Cache Rust dependencies
        uses: actions/cache@v1.0.1
        with:
          path: target
          key: ${{ matrix.target }}-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.target }}-build-

      - name: Install stable toolchain linux
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.69.0
          target: ${{ matrix.target }}

      - name: Install musl-tools
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Build target
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Package
        run: |
          mv target/${{ matrix.target }}/release bin/
          tar -czvf protofetch_${{ matrix.target }}.tar.gz bin/protofetch

      - name: Upload release
        uses: softprops/action-gh-release@v1
        with:
          files: |
           protofetch_${{ matrix.target }}.tar.gz

  release-mac-arm:
    runs-on: macos-latest
    needs: tests
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Cache Rust dependencies
        uses: actions/cache@v1.0.1
        with:
          path: target
          key: ${{ runner.OS }}-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.OS }}-build-

      - name: Install stable toolchain mac-arm64
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.69.0
          target: aarch64-apple-darwin

      - name: Build for release mac-arm64
        # We would need self-hosted arm runner for the correct target - for now we use `vendored-openssl` feature on `git2-rs dependency to overcome it
        run: |
          cargo build --release # --target=aarch64-apple-darwin
          mv target/release bin/
          tar -czvf protofetch_darwin_arm64.tar.gz bin/protofetch

      - name: Upload release
        uses: softprops/action-gh-release@v1
        with:
          files: |
           protofetch_darwin_arm64.tar.gz

  release-mac-amd:
    runs-on: macos-latest
    needs: tests
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Cache Rust dependencies
        uses: actions/cache@v1.0.1
        with:
          path: target
          key: ${{ runner.OS }}-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.OS }}-build-

      - name: Install stable toolchain mac-amd64
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.69.0
          target: x86_64-apple-darwin

      - name: Build for release mac-amd64
        run: |
          cargo build --release
          mv target/release bin/
          tar -czvf protofetch_darwin_amd64.tar.gz bin/protofetch

      - name: Upload release
        uses: softprops/action-gh-release@v1
        with:
          files: |
           protofetch_darwin_amd64.tar.gz

  release-windows:
    runs-on: windows-latest
    needs: tests
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Cache Rust dependencies
        uses: actions/cache@v1.0.1
        with:
          path: target
          key: ${{ runner.OS }}-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.OS }}-build-

      - name: Install stable toolchain win64
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.69.0
          target: x86_64-pc-windows-gnu

      - name: Build for release win64
        run: |
          cargo build --release
          mv target/release bin/
          tar -czvf protofetch_win64.tar.gz bin/protofetch.exe

      - name: Upload release
        uses: softprops/action-gh-release@v1
        with:
          files: |
           protofetch_win64.tar.gz

  npm-release:
    runs-on: ubuntu-latest
    needs: [ release-mac-amd, release-mac-arm, release-linux, release-windows, tests ]
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Publish npm package
        run: |
          VERSION=$(sed -n -e '/version/ s/.* = *//p' "Cargo.toml" | head -1 | tr -d '"')
          export VERSION
          # Tee had issue to write to the same file which is used for read so creating a temp package.json file
          mv .github/npm/package.json .github/npm/package.json.temp
          sed "s/VERSION#TO#REPLACE/${VERSION}/g" .github/npm/package.json.temp |  tee .github/npm/package.json
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ".npmrc"
          npm publish .github/npm

  crates-io:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Publish cargo package
        run: cargo publish --token ${{ env.CRATES_IO_TOKEN }}
